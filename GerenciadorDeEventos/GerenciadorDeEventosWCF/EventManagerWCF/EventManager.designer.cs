#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EventManagerWCF
{
    using System.Data.Linq;
    using System.Data.Linq.Mapping;
    using System.Data;
    using System.Collections.Generic;
    using System.Reflection;
    using System.Linq;
    using System.Linq.Expressions;
    using System.ComponentModel;
    using System;
    using System.Runtime.Serialization;

    [global::System.Data.Linq.Mapping.DatabaseAttribute(Name="EventManager")]
	public partial class EventManagerDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertContato(Contato instance);
    partial void UpdateContato(Contato instance);
    partial void DeleteContato(Contato instance);
    partial void InsertParticipante(Participante instance);
    partial void UpdateParticipante(Participante instance);
    partial void DeleteParticipante(Participante instance);
    partial void InsertConvite(Convite instance);
    partial void UpdateConvite(Convite instance);
    partial void DeleteConvite(Convite instance);
    partial void InsertEvento(Evento instance);
    partial void UpdateEvento(Evento instance);
    partial void DeleteEvento(Evento instance);
    #endregion
		
		public EventManagerDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["EventManagerConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public EventManagerDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EventManagerDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EventManagerDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EventManagerDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Contato> Contatos
		{
			get
			{
				return this.GetTable<Contato>();
			}
		}
		
		public System.Data.Linq.Table<Participante> Participantes
		{
			get
			{
				return this.GetTable<Participante>();
			}
		}
		
		public System.Data.Linq.Table<Convite> Convites
		{
			get
			{
				return this.GetTable<Convite>();
			}
		}
		
		public System.Data.Linq.Table<Evento> Eventos
		{
			get
			{
				return this.GetTable<Evento>();
			}
		}
	}
	
    [DataContract]
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Contato")]
	public partial class Contato : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Nome;
		
		private string _Numero;
		
		private string _Uri;
		
		private EntitySet<Participante> _Participantes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNomeChanging(string value);
    partial void OnNomeChanged();
    partial void OnNumeroChanging(string value);
    partial void OnNumeroChanged();
    partial void OnUriChanging(string value);
    partial void OnUriChanged();
    #endregion
		
		public Contato()
		{
			this._Participantes = new EntitySet<Participante>(new Action<Participante>(this.attach_Participantes), new Action<Participante>(this.detach_Participantes));
			OnCreated();
		}
		
        [DataMember]
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
        [DataMember]
        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nome", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Nome
		{
			get
			{
				return this._Nome;
			}
			set
			{
				if ((this._Nome != value))
				{
					this.OnNomeChanging(value);
					this.SendPropertyChanging();
					this._Nome = value;
					this.SendPropertyChanged("Nome");
					this.OnNomeChanged();
				}
			}
		}
        [DataMember]
        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Numero", DbType="NChar(10)")]
		public string Numero
		{
			get
			{
				return this._Numero;
			}
			set
			{
				if ((this._Numero != value))
				{
					this.OnNumeroChanging(value);
					this.SendPropertyChanging();
					this._Numero = value;
					this.SendPropertyChanged("Numero");
					this.OnNumeroChanged();
				}
			}
		}
        [DataMember]
        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Uri", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Uri
		{
			get
			{
				return this._Uri;
			}
			set
			{
				if ((this._Uri != value))
				{
					this.OnUriChanging(value);
					this.SendPropertyChanging();
					this._Uri = value;
					this.SendPropertyChanged("Uri");
					this.OnUriChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contato_Participante", Storage="_Participantes", ThisKey="Id", OtherKey="IdContato")]
		public EntitySet<Participante> Participantes
		{
			get
			{
				return this._Participantes;
			}
			set
			{
				this._Participantes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Participantes(Participante entity)
		{
			this.SendPropertyChanging();
			entity.Contato = this;
		}
		
		private void detach_Participantes(Participante entity)
		{
			this.SendPropertyChanging();
			entity.Contato = null;
		}
	}
    [DataContract]
    [global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Participante")]
	public partial class Participante : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdContato;
		
		private int _IdEvento;
		
		private EntityRef<Contato> _Contato;
		
		private EntityRef<Evento> _Evento;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdContatoChanging(int value);
    partial void OnIdContatoChanged();
    partial void OnIdEventoChanging(int value);
    partial void OnIdEventoChanged();
    #endregion
		
		public Participante()
		{
			this._Contato = default(EntityRef<Contato>);
			this._Evento = default(EntityRef<Evento>);
			OnCreated();
		}
        [DataMember]
        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
        [DataMember]
        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdContato", DbType="Int NOT NULL")]
		public int IdContato
		{
			get
			{
				return this._IdContato;
			}
			set
			{
				if ((this._IdContato != value))
				{
					if (this._Contato.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdContatoChanging(value);
					this.SendPropertyChanging();
					this._IdContato = value;
					this.SendPropertyChanged("IdContato");
					this.OnIdContatoChanged();
				}
			}
		}
        [DataMember]
        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdEvento", DbType="Int NOT NULL")]
		public int IdEvento
		{
			get
			{
				return this._IdEvento;
			}
			set
			{
				if ((this._IdEvento != value))
				{
					if (this._Evento.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdEventoChanging(value);
					this.SendPropertyChanging();
					this._IdEvento = value;
					this.SendPropertyChanged("IdEvento");
					this.OnIdEventoChanged();
				}
			}
		}
        [DataMember]
        [global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contato_Participante", Storage="_Contato", ThisKey="IdContato", OtherKey="Id", IsForeignKey=true)]
		public Contato Contato
		{
			get
			{
				return this._Contato.Entity;
			}
			set
			{
				Contato previousValue = this._Contato.Entity;
				if (((previousValue != value) 
							|| (this._Contato.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contato.Entity = null;
						previousValue.Participantes.Remove(this);
					}
					this._Contato.Entity = value;
					if ((value != null))
					{
						value.Participantes.Add(this);
						this._IdContato = value.Id;
					}
					else
					{
						this._IdContato = default(int);
					}
					this.SendPropertyChanged("Contato");
				}
			}
		}
        [DataMember]
        [global::System.Data.Linq.Mapping.AssociationAttribute(Name="Evento_Participante", Storage="_Evento", ThisKey="IdEvento", OtherKey="Id", IsForeignKey=true)]
		public Evento Evento
		{
			get
			{
				return this._Evento.Entity;
			}
			set
			{
				Evento previousValue = this._Evento.Entity;
				if (((previousValue != value) 
							|| (this._Evento.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Evento.Entity = null;
						previousValue.Participantes.Remove(this);
					}
					this._Evento.Entity = value;
					if ((value != null))
					{
						value.Participantes.Add(this);
						this._IdEvento = value.Id;
					}
					else
					{
						this._IdEvento = default(int);
					}
					this.SendPropertyChanged("Evento");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

    [DataContract]
    [global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Convite")]
	public partial class Convite : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _NumeroConvidado;
		
		private int _IdEvento;
		
		private EntityRef<Evento> _Evento;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNumeroConvidadoChanging(string value);
    partial void OnNumeroConvidadoChanged();
    partial void OnIdEventoChanging(int value);
    partial void OnIdEventoChanged();
    #endregion
		
		public Convite()
		{
			this._Evento = default(EntityRef<Evento>);
			OnCreated();
		}
        [DataMember]
        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
        [DataMember]
        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumeroConvidado", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string NumeroConvidado
		{
			get
			{
				return this._NumeroConvidado;
			}
			set
			{
				if ((this._NumeroConvidado != value))
				{
					this.OnNumeroConvidadoChanging(value);
					this.SendPropertyChanging();
					this._NumeroConvidado = value;
					this.SendPropertyChanged("NumeroConvidado");
					this.OnNumeroConvidadoChanged();
				}
			}
		}
        [DataMember]
        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdEvento", DbType="Int NOT NULL")]
		public int IdEvento
		{
			get
			{
				return this._IdEvento;
			}
			set
			{
				if ((this._IdEvento != value))
				{
					if (this._Evento.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdEventoChanging(value);
					this.SendPropertyChanging();
					this._IdEvento = value;
					this.SendPropertyChanged("IdEvento");
					this.OnIdEventoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Evento_Convite", Storage="_Evento", ThisKey="IdEvento", OtherKey="Id", IsForeignKey=true)]
		public Evento Evento
		{
			get
			{
				return this._Evento.Entity;
			}
			set
			{
				Evento previousValue = this._Evento.Entity;
				if (((previousValue != value) 
							|| (this._Evento.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Evento.Entity = null;
						previousValue.Convites.Remove(this);
					}
					this._Evento.Entity = value;
					if ((value != null))
					{
						value.Convites.Add(this);
						this._IdEvento = value.Id;
					}
					else
					{
						this._IdEvento = default(int);
					}
					this.SendPropertyChanged("Evento");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

    [DataContract]
    [global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Evento")]
	public partial class Evento : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Nome;
		
		private string _Descricao;
		
		private System.Nullable<System.DateTime> _Data;
		
		private System.Nullable<double> _Latitude;
		
		private System.Nullable<double> _Longitude;
		
		private EntitySet<Participante> _Participantes;
		
		private EntitySet<Convite> _Convites;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNomeChanging(string value);
    partial void OnNomeChanged();
    partial void OnDescricaoChanging(string value);
    partial void OnDescricaoChanged();
    partial void OnDataChanging(System.Nullable<System.DateTime> value);
    partial void OnDataChanged();
    partial void OnLatitudeChanging(System.Nullable<double> value);
    partial void OnLatitudeChanged();
    partial void OnLongitudeChanging(System.Nullable<double> value);
    partial void OnLongitudeChanged();
    #endregion
		
		public Evento()
		{
			this._Participantes = new EntitySet<Participante>(new Action<Participante>(this.attach_Participantes), new Action<Participante>(this.detach_Participantes));
			this._Convites = new EntitySet<Convite>(new Action<Convite>(this.attach_Convites), new Action<Convite>(this.detach_Convites));
			OnCreated();
		}
        [DataMember]
        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
        [DataMember]
        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nome", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Nome
		{
			get
			{
				return this._Nome;
			}
			set
			{
				if ((this._Nome != value))
				{
					this.OnNomeChanging(value);
					this.SendPropertyChanging();
					this._Nome = value;
					this.SendPropertyChanged("Nome");
					this.OnNomeChanged();
				}
			}
		}
        [DataMember]
        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Descricao", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Descricao
		{
			get
			{
				return this._Descricao;
			}
			set
			{
				if ((this._Descricao != value))
				{
					this.OnDescricaoChanging(value);
					this.SendPropertyChanging();
					this._Descricao = value;
					this.SendPropertyChanged("Descricao");
					this.OnDescricaoChanged();
				}
			}
		}
        [DataMember]
        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Data", DbType="DateTime")]
		public System.Nullable<System.DateTime> Data
		{
			get
			{
				return this._Data;
			}
			set
			{
				if ((this._Data != value))
				{
					this.OnDataChanging(value);
					this.SendPropertyChanging();
					this._Data = value;
					this.SendPropertyChanged("Data");
					this.OnDataChanged();
				}
			}
		}
        [DataMember]
        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Latitude", DbType="Float")]
		public System.Nullable<double> Latitude
		{
			get
			{
				return this._Latitude;
			}
			set
			{
				if ((this._Latitude != value))
				{
					this.OnLatitudeChanging(value);
					this.SendPropertyChanging();
					this._Latitude = value;
					this.SendPropertyChanged("Latitude");
					this.OnLatitudeChanged();
				}
			}
		}
        [DataMember]
        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Longitude", DbType="Float")]
		public System.Nullable<double> Longitude
		{
			get
			{
				return this._Longitude;
			}
			set
			{
				if ((this._Longitude != value))
				{
					this.OnLongitudeChanging(value);
					this.SendPropertyChanging();
					this._Longitude = value;
					this.SendPropertyChanged("Longitude");
					this.OnLongitudeChanged();
				}
			}
		}

        [DataMember]
        [global::System.Data.Linq.Mapping.AssociationAttribute(Name="Evento_Participante", Storage="_Participantes", ThisKey="Id", OtherKey="IdEvento")]
		public EntitySet<Participante> Participantes
		{
			get
			{
				return this._Participantes;
			}
			set
			{
				this._Participantes.Assign(value);
			}
		}

        [DataMember]
        [global::System.Data.Linq.Mapping.AssociationAttribute(Name="Evento_Convite", Storage="_Convites", ThisKey="Id", OtherKey="IdEvento")]
		public EntitySet<Convite> Convites
		{
			get
			{
				return this._Convites;
			}
			set
			{
				this._Convites.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Participantes(Participante entity)
		{
			this.SendPropertyChanging();
			entity.Evento = this;
		}
		
		private void detach_Participantes(Participante entity)
		{
			this.SendPropertyChanging();
			entity.Evento = null;
		}
		
		private void attach_Convites(Convite entity)
		{
			this.SendPropertyChanging();
			entity.Evento = this;
		}
		
		private void detach_Convites(Convite entity)
		{
			this.SendPropertyChanging();
			entity.Evento = null;
		}
	}
}
#pragma warning restore 1591
