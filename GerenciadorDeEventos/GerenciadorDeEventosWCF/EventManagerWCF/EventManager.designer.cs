#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EventManagerWCF
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="EventManager")]
	public partial class EventManagerDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertContato(Contato instance);
    partial void UpdateContato(Contato instance);
    partial void DeleteContato(Contato instance);
    partial void InsertParticipante(Participante instance);
    partial void UpdateParticipante(Participante instance);
    partial void DeleteParticipante(Participante instance);
    partial void InsertConvite(Convite instance);
    partial void UpdateConvite(Convite instance);
    partial void DeleteConvite(Convite instance);
    partial void InsertEvento(Evento instance);
    partial void UpdateEvento(Evento instance);
    partial void DeleteEvento(Evento instance);
    #endregion
		
		public EventManagerDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["EventManagerConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public EventManagerDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EventManagerDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EventManagerDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EventManagerDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Contato> Contatos
		{
			get
			{
				return this.GetTable<Contato>();
			}
		}
		
		public System.Data.Linq.Table<Participante> Participantes
		{
			get
			{
				return this.GetTable<Participante>();
			}
		}
		
		public System.Data.Linq.Table<Convite> Convites
		{
			get
			{
				return this.GetTable<Convite>();
			}
		}
		
		public System.Data.Linq.Table<Evento> Eventos
		{
			get
			{
				return this.GetTable<Evento>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Contato")]
	public partial class Contato : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _nome;
		
		private string _numero;
		
		private string _uri;
		
		private EntitySet<Participante> _Participantes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnomeChanging(string value);
    partial void OnnomeChanged();
    partial void OnnumeroChanging(string value);
    partial void OnnumeroChanged();
    partial void OnuriChanging(string value);
    partial void OnuriChanged();
    #endregion
		
		public Contato()
		{
			this._Participantes = new EntitySet<Participante>(new Action<Participante>(this.attach_Participantes), new Action<Participante>(this.detach_Participantes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nome", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string nome
		{
			get
			{
				return this._nome;
			}
			set
			{
				if ((this._nome != value))
				{
					this.OnnomeChanging(value);
					this.SendPropertyChanging();
					this._nome = value;
					this.SendPropertyChanged("nome");
					this.OnnomeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_numero", DbType="NChar(10)")]
		public string numero
		{
			get
			{
				return this._numero;
			}
			set
			{
				if ((this._numero != value))
				{
					this.OnnumeroChanging(value);
					this.SendPropertyChanging();
					this._numero = value;
					this.SendPropertyChanged("numero");
					this.OnnumeroChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_uri", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string uri
		{
			get
			{
				return this._uri;
			}
			set
			{
				if ((this._uri != value))
				{
					this.OnuriChanging(value);
					this.SendPropertyChanging();
					this._uri = value;
					this.SendPropertyChanged("uri");
					this.OnuriChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contato_Participante", Storage="_Participantes", ThisKey="id", OtherKey="idContato")]
		public EntitySet<Participante> Participantes
		{
			get
			{
				return this._Participantes;
			}
			set
			{
				this._Participantes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Participantes(Participante entity)
		{
			this.SendPropertyChanging();
			entity.Contato = this;
		}
		
		private void detach_Participantes(Participante entity)
		{
			this.SendPropertyChanging();
			entity.Contato = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Participantes")]
	public partial class Participante : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _idContato;
		
		private int _idEvento;
		
		private EntityRef<Contato> _Contato;
		
		private EntityRef<Evento> _Evento;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnidContatoChanging(int value);
    partial void OnidContatoChanged();
    partial void OnidEventoChanging(int value);
    partial void OnidEventoChanged();
    #endregion
		
		public Participante()
		{
			this._Contato = default(EntityRef<Contato>);
			this._Evento = default(EntityRef<Evento>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idContato", DbType="Int NOT NULL")]
		public int idContato
		{
			get
			{
				return this._idContato;
			}
			set
			{
				if ((this._idContato != value))
				{
					if (this._Contato.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidContatoChanging(value);
					this.SendPropertyChanging();
					this._idContato = value;
					this.SendPropertyChanged("idContato");
					this.OnidContatoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idEvento", DbType="Int NOT NULL")]
		public int idEvento
		{
			get
			{
				return this._idEvento;
			}
			set
			{
				if ((this._idEvento != value))
				{
					if (this._Evento.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidEventoChanging(value);
					this.SendPropertyChanging();
					this._idEvento = value;
					this.SendPropertyChanged("idEvento");
					this.OnidEventoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contato_Participante", Storage="_Contato", ThisKey="idContato", OtherKey="id", IsForeignKey=true)]
		public Contato Contato
		{
			get
			{
				return this._Contato.Entity;
			}
			set
			{
				Contato previousValue = this._Contato.Entity;
				if (((previousValue != value) 
							|| (this._Contato.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contato.Entity = null;
						previousValue.Participantes.Remove(this);
					}
					this._Contato.Entity = value;
					if ((value != null))
					{
						value.Participantes.Add(this);
						this._idContato = value.id;
					}
					else
					{
						this._idContato = default(int);
					}
					this.SendPropertyChanged("Contato");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Evento_Participante", Storage="_Evento", ThisKey="idEvento", OtherKey="id", IsForeignKey=true)]
		public Evento Evento
		{
			get
			{
				return this._Evento.Entity;
			}
			set
			{
				Evento previousValue = this._Evento.Entity;
				if (((previousValue != value) 
							|| (this._Evento.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Evento.Entity = null;
						previousValue.Participantes.Remove(this);
					}
					this._Evento.Entity = value;
					if ((value != null))
					{
						value.Participantes.Add(this);
						this._idEvento = value.id;
					}
					else
					{
						this._idEvento = default(int);
					}
					this.SendPropertyChanged("Evento");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Convites")]
	public partial class Convite : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _numeroConvidado;
		
		private int _idEvento;
		
		private EntityRef<Evento> _Evento;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnumeroConvidadoChanging(string value);
    partial void OnnumeroConvidadoChanged();
    partial void OnidEventoChanging(int value);
    partial void OnidEventoChanged();
    #endregion
		
		public Convite()
		{
			this._Evento = default(EntityRef<Evento>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_numeroConvidado", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string numeroConvidado
		{
			get
			{
				return this._numeroConvidado;
			}
			set
			{
				if ((this._numeroConvidado != value))
				{
					this.OnnumeroConvidadoChanging(value);
					this.SendPropertyChanging();
					this._numeroConvidado = value;
					this.SendPropertyChanged("numeroConvidado");
					this.OnnumeroConvidadoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idEvento", DbType="Int NOT NULL")]
		public int idEvento
		{
			get
			{
				return this._idEvento;
			}
			set
			{
				if ((this._idEvento != value))
				{
					if (this._Evento.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidEventoChanging(value);
					this.SendPropertyChanging();
					this._idEvento = value;
					this.SendPropertyChanged("idEvento");
					this.OnidEventoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Evento_Convite", Storage="_Evento", ThisKey="idEvento", OtherKey="id", IsForeignKey=true)]
		public Evento Evento
		{
			get
			{
				return this._Evento.Entity;
			}
			set
			{
				Evento previousValue = this._Evento.Entity;
				if (((previousValue != value) 
							|| (this._Evento.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Evento.Entity = null;
						previousValue.Convites.Remove(this);
					}
					this._Evento.Entity = value;
					if ((value != null))
					{
						value.Convites.Add(this);
						this._idEvento = value.id;
					}
					else
					{
						this._idEvento = default(int);
					}
					this.SendPropertyChanged("Evento");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Evento")]
	public partial class Evento : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _nome;
		
		private string _descricao;
		
		private System.DateTime _data;
		
		private long _latitude;
		
		private long _longitude;
		
		private EntitySet<Participante> _Participantes;
		
		private EntitySet<Convite> _Convites;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnomeChanging(string value);
    partial void OnnomeChanged();
    partial void OndescricaoChanging(string value);
    partial void OndescricaoChanged();
    partial void OndataChanging(System.DateTime value);
    partial void OndataChanged();
    partial void OnlatitudeChanging(long value);
    partial void OnlatitudeChanged();
    partial void OnlongitudeChanging(long value);
    partial void OnlongitudeChanged();
    #endregion
		
		public Evento()
		{
			this._Participantes = new EntitySet<Participante>(new Action<Participante>(this.attach_Participantes), new Action<Participante>(this.detach_Participantes));
			this._Convites = new EntitySet<Convite>(new Action<Convite>(this.attach_Convites), new Action<Convite>(this.detach_Convites));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nome", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string nome
		{
			get
			{
				return this._nome;
			}
			set
			{
				if ((this._nome != value))
				{
					this.OnnomeChanging(value);
					this.SendPropertyChanging();
					this._nome = value;
					this.SendPropertyChanged("nome");
					this.OnnomeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_descricao", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string descricao
		{
			get
			{
				return this._descricao;
			}
			set
			{
				if ((this._descricao != value))
				{
					this.OndescricaoChanging(value);
					this.SendPropertyChanging();
					this._descricao = value;
					this.SendPropertyChanged("descricao");
					this.OndescricaoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_data", DbType="DateTime NOT NULL")]
		public System.DateTime data
		{
			get
			{
				return this._data;
			}
			set
			{
				if ((this._data != value))
				{
					this.OndataChanging(value);
					this.SendPropertyChanging();
					this._data = value;
					this.SendPropertyChanged("data");
					this.OndataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_latitude")]
		public long latitude
		{
			get
			{
				return this._latitude;
			}
			set
			{
				if ((this._latitude != value))
				{
					this.OnlatitudeChanging(value);
					this.SendPropertyChanging();
					this._latitude = value;
					this.SendPropertyChanged("latitude");
					this.OnlatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_longitude")]
		public long longitude
		{
			get
			{
				return this._longitude;
			}
			set
			{
				if ((this._longitude != value))
				{
					this.OnlongitudeChanging(value);
					this.SendPropertyChanging();
					this._longitude = value;
					this.SendPropertyChanged("longitude");
					this.OnlongitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Evento_Participante", Storage="_Participantes", ThisKey="id", OtherKey="idEvento")]
		public EntitySet<Participante> Participantes
		{
			get
			{
				return this._Participantes;
			}
			set
			{
				this._Participantes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Evento_Convite", Storage="_Convites", ThisKey="id", OtherKey="idEvento")]
		public EntitySet<Convite> Convites
		{
			get
			{
				return this._Convites;
			}
			set
			{
				this._Convites.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Participantes(Participante entity)
		{
			this.SendPropertyChanging();
			entity.Evento = this;
		}
		
		private void detach_Participantes(Participante entity)
		{
			this.SendPropertyChanging();
			entity.Evento = null;
		}
		
		private void attach_Convites(Convite entity)
		{
			this.SendPropertyChanging();
			entity.Evento = this;
		}
		
		private void detach_Convites(Convite entity)
		{
			this.SendPropertyChanging();
			entity.Evento = null;
		}
	}
}
#pragma warning restore 1591
